(add-to-list
 'magic-mode-alist
 '("\\(.\\|\n\\)*@interface" . objc-mode))

(add-hook 'c-mode-common-hook
  (lambda() 
    (local-set-key  (kbd "C-c o") 'ff-find-other-file)))
(add-hook 'objc-mode-hook
          (lambda ()
            (set (make-local-variable 'cc-other-file-alist)  '(("\\.m\\'" (".h")) ("\\.h\\'" (".m" ".c" ".cpp"))))))

;; Check if system is Darwin/Mac OS X
(defun system-type-is-darwin ()
(interactive)
"Return true if system is darwin-based (Mac OS X)"
(string-equal system-type "darwin")
)

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
(interactive)
"Return true if system is GNU/Linux-based"
(string-equal system-type "gnu/linux")
)

;; Check if the system is my Kubuntu GNU/Linux at work
(defun system-is-my-workpc ()
(interactive)
"Return true if the system we are running on is my PC at work"
(string-equal system-name "dev002.workplace.com")
)

;(set-face-background 'ac-candidate-face "lightgray")
;(set-face-underline 'ac-candidate-face "darkgray")
;(set-face-background 'ac-selection-face "steelblue")

;(require 'xcscope)

; sort ido filelist by mtime instead of alphabetically
;  (add-hook 'ido-make-file-list-hook 'ido-sort-mtime)
;  (add-hook 'ido-make-dir-list-hook 'ido-sort-mtime)
;  (defun ido-sort-mtime ()
;    (setq ido-temp-list
;          (sort ido-temp-list 
;                (lambda (a b)
;                  (let ((ta (nth 5 (file-attributes (concat ido-current-directory a))))
;                        (tb (nth 5 (file-attributes (concat ido-current-directory b)))))
;                    (if (= (nth 0 ta) (nth 0 tb))
;                        (> (nth 1 ta) (nth 1 tb))
;                      (> (nth 0 ta) (nth 0 tb)))))))
;    (ido-to-end  ;; move . files to end (again)
;     (delq nil (mapcar
;                (lambda (x) (if (string-equal (substring x 0 1) ".") x))
;                ido-temp-list))))

; Duplicate a line, no matter where the cursor is at. Currently unbound
;(defun duplicate-current-line () (interactive)
;  (let ((str (concat
;              (buffer-substring (point)
;                                (save-excursion (end-of-line) (point)))
;              "\n"
;              (buffer-substring (save-excursion (beginning-of-line) (point))
;                                (point)))))
;    (insert str)
;    ))


;(require 'tabbar)
;(tabbar-mode)
;
;; Tabbar just one group
;(setq tabbar-buffer-groups-function
;(lambda ()
;(list "All")))
;
;; FIXME: can't get this to work
;;(autoload 'guess-style-set-variable "guess-style" nil t)
;;(autoload 'guess-style-guess-variable "guess-style")
;;(autoload 'guess-style-guess-all "guess-style" nil t)
;;(add-hook 'c-mode-common-hook 'guess-style-guess-all)
;;;(global-guess-style-info-mode 1)
;
;
;
;;; add a buffer modification state indicator in the tab label,
;;; and place a space around the label to make it looks less crowd
;(defadvice tabbar-buffer-tab-label (after fixup_tab_label_space_and_flag activate)
;  (setq ad-return-value
;       	(if (and (buffer-modified-p (tabbar-tab-value tab))
;       			 (buffer-file-name (tabbar-tab-value tab)))
;       		(concat "*" (concat ad-return-value " "))
;       		(concat " " (concat ad-return-value " ")))))
;
;;; called each time the modification state of the buffer changed
;(defun ztl-modification-state-change ()
;  (tabbar-set-template tabbar-current-tabset nil)
;  (tabbar-display-update))
;;; first-change-hook is called BEFORE the change is made
;(defun ztl-on-buffer-modification ()
;  (set-buffer-modified-p t)
;  (ztl-modification-state-change))
;(add-hook 'after-save-hook 'ztl-modification-state-change)
;;; this doesn't work for revert, I don't know
;;;(add-hook 'after-revert-hook 'ztl-modification-state-change)
;(add-hook 'first-change-hook 'ztl-on-buffer-modification)
;
;
;(global-set-key "\M-n" 'tabbar-forward)
;(global-set-key "\M-p" 'tabbar-forward)


; FIXME: could not get to work. Do I need it?
;(require 'auto-dictionary)
;(add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1)))

;(add-hook 'python-mode-hook '(lambda () (eldoc-mode 1)) t)

; Access windows easy with M-0 to M-9
;;(autoload 'window-number-meta-mode "window-number"
;;  "A global minor mode that enables use of the M- prefix to select
;;windows, use `window-number-mode' to display the window numbers in
;;the mode-line."
;;  t)
;;(window-number-meta-mode 1)

; Doxygen documentation
; IMPORTANT: Requires Semantic
; TODO: learn how to use this
;(require 'doc-mode)
;(add-hook 'c-mode-hook 'doc-mode)

; Default font
;;(set-default-font "-*-lucidatypewriter-medium-*-*-*-12-140-*-*-*-*-*-*")
;(set-default-font "-*-bitstream vera sans mono-medium-r-*-*-*-120-*-*-*-*-iso8859-*")
;;(set-default-font "-misc-*-*-*-*-*-12-*-*-*-*-*-*-*")
;(set-default-font "-misc-fixed-medium-r-semicondensed-*-*-120-*-*-c-*-iso8859-1")
;(set-default-font "-xos4-terminus-medium-r-normal-*-*-120-*-*-c-*-paratype-pt154")
